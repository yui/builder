<?xml version="1.0" encoding="UTF-8"?>

<project name="YuiSharedProperties">

    <!-- ANT contrib library for loops, if/else support, with property fix for FOR task -->
    <taskdef resource="antcontrib.properties">
        <classpath>
            <pathelement location="${builddir}/lib/ant-contrib/ant-contrib-1.0b3-modified.jar" />
        </classpath>
    </taskdef>

    <dirname property="buildfile.dir" file="${ant.file}" />

    <property environment="env"/>

    <!--
        builddir : The path to the builder/componentbuild directory from the component build file
        srcdir   : The path to top of the project source directory (e.g. yui2) from the component build file
    -->
    <property name="builddir" location="../../../builder/componentbuild" />
    <property name="srcdir" location="../.." />

    <!-- buildfiles.eol : End of line char to use for built files -->
    <property name="buildfiles.eol" value="lf"/>

    <!-- Supporting Tools -->
    <property name="rhino.jar" location="${builddir}/lib/rhino/js.jar" />
    <property name="jslintconsole.js" location="${builddir}/lib/jslint/jslint-console.js" />
    <property name="jslintsrc.js" location="${builddir}/lib/jslint/fulljslint.js" />
    <property name="yuicompressor.jar" location="${builddir}/lib/yuicompressor/ant-yuicompressor-2.4.5pre2.jar" />
    <property name="yuitest-coverage.jar" location="${builddir}/lib/yuitest-coverage/yuitest-coverage.jar" />
    <property name="yrb2jsonconsole.js" location="${builddir}/lib/yrb2json/yrb2json-console.js" />
    <property name="yrb2jsonsrc.js" location="${builddir}/lib/yrb2json/yrb2json.js" />

    <!-- YUI Compressor arguments for JS and CSS files -->

    <property name="yuicompressor.js.charset" value="utf-8" />
    <property name="yuicompressor.css.charset" value="utf-8" />

    <property name="yuicompressor.js.args" value="--disable-optimizations --preserve-semi --line-break 6000" />
    <property name="yuicompressor.css.args" value="--line-break 6000" />

    <!-- Enable/Disable YUI Compressor verbosity. NOTE: Checked in build files should not disable this flag -->
    <property name="yuicompressor.js.verbose" value="true" />
    <property name="yuicompressor.css.verbose" value="true" />

    <condition property="yuicompressor.js.args.internal" value="-v --charset ${yuicompressor.js.charset} ${yuicompressor.js.args}" else="--charset ${yuicompressor.js.charset} ${yuicompressor.js.args}">
        <istrue value="${yuicompressor.js.verbose}" />
    </condition>

    <condition property="yuicompressor.css.args.internal" value="-v --charset ${yuicompressor.css.charset} ${yuicompressor.css.args}" else="--charset ${yuicompressor.css.charset} ${yuicompressor.css.args}">
        <istrue value="${yuicompressor.css.verbose}" />
    </condition>

    <!-- Top Level Build Directories (e.g. yui2/build, yui3/build)-->
    <property name="global.build.base" location="${srcdir}/build" />
    <property name="global.build.component" location="${global.build.base}/${component}" />
    <property name="global.build.component.assets" location="${global.build.component}/assets" />

	<!-- Component Properties -->
    <property name="component.module" value="${component}" />
    <property name="component.basedir" location="${buildfile.dir}" />
    <property name="component.jsfiles.base" location="${component.basedir}/js" />
    <property name="component.cssfiles.base" location="${component.basedir}/css" />

	<property name="component.lang.base" location="${component.basedir}/lang" />
	
    <property name="component.assets.flatten" value="true" />
    <property name="component.assets.base" location="${component.basedir}/assets" />
    <property name="component.assets.files" value="**/*" />

    <property name="component.assets.legacy.flatten" value="true" />
    <property name="component.assets.legacy.base" location="${component.assets.base}/legacy" />
    <property name="component.assets.legacy.files" value="**/*" />

    <property name="component.assets.skins.base" location="${component.assets.base}/skins" />
    <property name="component.assets.skins.files" value="**/*" />

    <condition property="component.skins.exist">
        <and>
            <available file="${component.assets.base}/${component}-core.css" type="file" />
            <available file="${component.assets.base}/skins" type="dir" />
        </and>
    </condition>

    <!-- component is part of a rollup build, so rollup skins to parent -->
    <condition property="rollupskins">
        <and>
            <istrue value="${rollup}" />
            <istrue value="${component.skins.exist}" />
        </and>
    </condition>

    <available file="${component.assets.base}" type="dir" property="component.assets.exist"/>

    <condition property="component.langs.exist">
    	<and>
    		<or>
    		    <isset property="component.lang" />
    			<isset property="component.rollup.lang" />
    		</or>
    	</and>
    </condition>

    <condition property="rolluplangs">
        <and>
            <istrue value="${rollup}" />
            <istrue value="${component.langs.exist}" />
        </and>
    </condition>
	
    <!-- component test module properties -->
    <property name="testsdir" value="./tests"/>
    <property name="tests.srcdir" value="${testsdir}/src"/>
    <property name="tests.builddir" value="${testsdir}"/>
    <property name="tests.component" value="${component}-tests"/>
    <property name="tests.jsfiles" value="${component}.js"/>
    <property name="tests.requires" value="${component}, test"/>
    <if>
        <istrue value="${component.rollup}"/>
        <then>
            <propertyregex property="tests.rollup.modules"
                           override="true"
                           input="${component.use}"
                           casesensitive="false"
                           regexp="([^\,\s]+)"
                           replace="\1-tests"
                            />
        </then>
    </if>

    <!-- 
         DEPRECATED: component.basefilename and component.releasetype are deprecated 
         We used to mark filenames with suffixes (-beta, -experimental), which we no longer do 
    -->
    <condition property="component.basefilename" value="${component}" else="${component}">
        <isset property="component.releasetype"/>
    </condition>

    <!-- Default logger regex values if not provided -->
    <property name="component.logger.regex" value="^.*?(?:logger|YAHOO.log).*?(?:;|\).*;|(?:\r?\n.*?)*?\).*;).*;?.*?\r?\n" />
    <property name="component.logger.regex.replace" value="" />
    <property name="component.logger.regex.flags" value="mg" />
    <property name="component.logger.regex.byline" value="false" />

    <!-- Rollup support, currently only used for YUI 3 -->
    <property name="component.rollup" value="false"/>
    <property name="component.rollup.target" value="all"/>

    <condition property="component.builddir" value="${component.basedir}/build_rollup_tmp" else="${component.basedir}/build_tmp">
        <istrue value="${component.rollup}"/>
    </condition>

    <condition property="rollup.skins.exist">
        <and>
            <istrue value="${component.rollup}" />
            <available file="${component.assets.base}/skins" type="dir" />
        </and>
    </condition>

    <condition property="skins.exist">
        <or>
            <istrue value="${rollup.skins.exist}" />
            <istrue value="${component.skins.exist}" />
        </or>
    </condition>    

	<!-- The temporary working directory used by the build process -->
    <property name="workingdir" location="${component.builddir}/ant" />
    
    <!-- Directory for language resource bundles in JSON format derived from YRB format -->
    <property name="component.langbuilddir" value="${component.basedir}/build_lang_tmp" />

	<!-- The file which defines the default targets for the particular type of component (module, rollup, css) --> 
    <condition property="targetbase" value="rollup" else="module">
        <istrue value="${component.rollup}"/>
    </condition>

    <condition property="targets" value="../shared/cssmodule.xml" else="${targetbase}.xml">
        <isset property="component.cssfiles" />
    </condition>

    <property name="lint.failonerror" value="false"/>

    <property name="node.executable" value="node"/>
    <property name="node.path" value=""/>
    <property name="node.jslint.url" value="http://127.0.0.1:8081/"/>
    <property name="yuicompressor.url" value="http://127.0.0.1:${yuicompressor.port}/compress"/>

</project>
